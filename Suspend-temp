"tx_errors", "rx_dropped", "tx_dropped", "multicast", "collisions",
2693         "rx_length_errors", "rx_over_errors", "rx_crc_errors",
2694         "rx_frame_errors", "rx_fifo_errors", "rx_missed_errors",
2695         "tx_aborted_errors", "tx_carrier_errors", "tx_fifo_errors",
2696         "tx_heartbeat_errors", "tx_window_errors",
2697         /* device-specific stats */
2698         "tx_deferred", "tx_single_collisions", "tx_multi_collisions",
2699         "tx_flow_control_pause", "rx_flow_control_pause",
2700         "rx_flow_control_unsupported", "tx_tco_packets", "rx_tco_packets",
2701         "rx_short_frame_errors", "rx_over_length_errors",
2702 };
2703 #define E100_NET_STATS_LEN      21
2704 #define E100_STATS_LEN  ARRAY_SIZE(e100_gstrings_stats)
2705 
2706 static int e100_get_sset_count(struct net_device *netdev, int sset)
2707 {
2708         switch (sset) {
2709         case ETH_SS_TEST:
2710                 return E100_TEST_LEN;
2711         case ETH_SS_STATS:
2712                 return E100_STATS_LEN;
2713         default:
2714                 return -EOPNOTSUPP;
2715         }
2716 }
2717 
2718 static void e100_get_ethtool_stats(struct net_device *netdev,
2719         struct ethtool_stats *stats, u64 *data)
2720 {
2721         struct nic *nic = netdev_priv(netdev);
2722         int i;
2723 
2724         for (i = 0; i < E100_NET_STATS_LEN; i++)
2725                 data[i] = ((unsigned long *)&netdev->stats)[i];
2726 
2727         data[i++] = nic->tx_deferred;
2728         data[i++] = nic->tx_single_collisions;
2729         data[i++] = nic->tx_multiple_collisions;
2730         data[i++] = nic->tx_fc_pause;
2731         data[i++] = nic->rx_fc_pause;
2732         data[i++] = nic->rx_fc_unsupported;
2733         data[i++] = nic->tx_tco_frames;
2734         data[i++] = nic->rx_tco_frames;
2735         data[i++] = nic->rx_short_frame_errors;
2736         data[i++] = nic->rx_over_length_errors;
2737 }
2738 
2739 static void e100_get_strings(struct net_device *netdev, u32 stringset, u8 *data)
2740 {
2741         switch (stringset) {
2742         case ETH_SS_TEST:
2743                 memcpy(data, *e100_gstrings_test, sizeof(e100_gstrings_test));
2744                 break;
2745         case ETH_SS_STATS:
2746                 memcpy(data, *e100_gstrings_stats, sizeof(e100_gstrings_stats));
2747                 break;
2748         }
2749 }
2750 
2751 static const struct ethtool_ops e100_ethtool_ops = {
2752         .get_settings           = e100_get_settings,
2753         .set_settings           = e100_set_settings,
2754         .get_drvinfo            = e100_get_drvinfo,
2755         .get_regs_len           = e100_get_regs_len,
2756         .get_regs               = e100_get_regs,
2757         .get_wol                = e100_get_wol,
2758         .set_wol                = e100_set_wol,
2759         .get_msglevel           = e100_get_msglevel,
2760         .set_msglevel           = e100_set_msglevel,
2761         .nway_reset             = e100_nway_reset,
2762         .get_link               = e100_get_link,
2763         .get_eeprom_len         = e100_get_eeprom_len,
2764         .get_eeprom             = e100_get_eeprom,
2765         .set_eeprom             = e100_set_eeprom,
2766         .get_ringparam          = e100_get_ringparam,
2767         .set_ringparam          = e100_set_ringparam,
2768         .self_test              = e100_diag_test,
2769         .get_strings            = e100_get_strings,
2770         .set_phys_id            = e100_set_phys_id,
2771         .get_ethtool_stats      = e100_get_ethtool_stats,
2772         .get_sset_count         = e100_get_sset_count,
2773         .get_ts_info            = ethtool_op_get_ts_info,
2774 };
2775 
2776 static int e100_do_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd)
2777 {
2778         struct nic *nic = netdev_priv(netdev);
2779 
2780         return generic_mii_ioctl(&nic->mii, if_mii(ifr), cmd, NULL);
2781 }
2782 
2783 static int e100_alloc(struct nic *nic)
2784 {
2785         nic->mem = pci_alloc_consistent(nic->pdev, sizeof(struct mem),
2786                 &nic->dma_addr);
2787         return nic->mem ? 0 : -ENOMEM;
2788 }
2789 
2790 static void e100_free(struct nic *nic)
2791 {
2792         if (nic->mem) {
2793                 pci_free_consistent(nic->pdev, sizeof(struct mem),
2794                         nic->mem, nic->dma_addr);
2795                 nic->mem = NULL;
2796         }
2797 }
2798 
2799 static int e100_open(struct net_device *netdev)
2800 {
2801         struct nic *nic = netdev_priv(netdev);
2802         int err = 0;
2803 
2804         netif_carrier_off(netdev);
2805         if ((err = e100_up(nic)))
2806                 netif_err(nic, ifup, nic->netdev, "Cannot open interface, aborting\n");
2807         return err;
2808 }
2809 
2810 static int e100_close(struct net_device *netdev)
2811 {
2812         e100_down(netdev_priv(netdev));
2813         return 0;
2814 }
2815 
2816 static int e100_set_features(struct net_device *netdev,
2817                              netdev_features_t features)
2818 {
2819         struct nic *nic = netdev_priv(netdev);
2820         netdev_features_t changed = features ^ netdev->features;
2821 
2822         if (!(changed & (NETIF_F_RXFCS | NETIF_F_RXALL)))
2823                 return 0;
2824 
2825         netdev->features = features;
2826         e100_exec_cb(nic, NULL, e100_configure);
2827         return 0;
2828 }
2829 
2830 static const struct net_device_ops e100_netdev_ops = {
2831         .ndo_open               = e100_open,
2832         .ndo_stop               = e100_close,
2833         .ndo_start_xmit         = e100_xmit_frame,
2834         .ndo_validate_addr      = eth_validate_addr,
2835         .ndo_set_rx_mode        = e100_set_multicast_list,
2836         .ndo_set_mac_address    = e100_set_mac_address,
2837         .ndo_change_mtu         = e100_change_mtu,
2838         .ndo_do_ioctl           = e100_do_ioctl,
2839         .ndo_tx_timeout         = e100_tx_timeout,
2840 #ifdef CONFIG_NET_POLL_CONTROLLER
2841         .ndo_poll_controller    = e100_netpoll,
2842 #endif
2843         .ndo_set_features       = e100_set_features,
2844 };
2845 
2846 static int e100_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
2847 {
2848         struct net_device *netdev;
2849         struct nic *nic;
2850         int err;
2851 
2852         if (!(netdev = alloc_etherdev(sizeof(struct nic))))
2853                 return -ENOMEM;
2854 
2855         netdev->hw_features |= NETIF_F_RXFCS;
2856         netdev->priv_flags |= IFF_SUPP_NOFCS;
2857         netdev->hw_features |= NETIF_F_RXALL;
2858 
2859         netdev->netdev_ops = &e100_netdev_ops;
2860         netdev->ethtool_ops = &e100_ethtool_ops;
2861         netdev->watchdog_timeo = E100_WATCHDOG_PERIOD;
2862         strncpy(netdev->name, pci_name(pdev), sizeof(netdev->name) - 1);
2863 
2864         nic = netdev_priv(netdev);
2865         netif_napi_add(netdev, &nic->napi, e100_poll, E100_NAPI_WEIGHT);
2866         nic->netdev = netdev;
2867         nic->pdev = pdev;
2868         nic->msg_enable = (1 << debug) - 1;
2869         nic->mdio_ctrl = mdio_ctrl_hw;
2870         pci_set_drvdata(pdev, netdev);
2871 
2872         if ((err = pci_enable_device(pdev))) {
2873                 netif_err(nic, probe, nic->netdev, "Cannot enable PCI device, aborting\n");
2874                 goto err_out_free_dev;
2875         }
2876 
2877         if (!(pci_resource_flags(pdev, 0) & IORESOURCE_MEM)) {
2878                 netif_err(nic, probe, nic->netdev, "Cannot find proper PCI device base address, aborting\n");
2879                 err = -ENODEV;
2880                 goto err_out_disable_pdev;
2881         }
2882 
2883         if ((err = pci_request_regions(pdev, DRV_NAME))) {
2884                 netif_err(nic, probe, nic->netdev, "Cannot obtain PCI resources, aborting\n");
2885                 goto err_out_disable_pdev;
2886         }
2887 
2888         if ((err = pci_set_dma_mask(pdev, DMA_BIT_MASK(32)))) {
2889                 netif_err(nic, probe, nic->netdev, "No usable DMA configuration, aborting\n");
2890                 goto err_out_free_res;
2891         }
2892 
2893         SET_NETDEV_DEV(netdev, &pdev->dev);
2894 
2895         if (use_io)
2896                 netif_info(nic, probe, nic->netdev, "using i/o access mode\n");
2897 
2898         nic->csr = pci_iomap(pdev, (use_io ? 1 : 0), sizeof(struct csr));
2899         if (!nic->csr) {
2900                 netif_err(nic, probe, nic->netdev, "Cannot map device registers, aborting\n");
2901                 err = -ENOMEM;
2902                 goto err_out_free_res;
2903         }
2904 
2905         if (ent->driver_data)
2906                 nic->flags |= ich;
2907         else
2908                 nic->flags &= ~ich;
2909 
2910         e100_get_defaults(nic);
2911 
2912         /* D100 MAC doesn't allow rx of vlan packets with normal MTU */
2913         if (nic->mac < mac_82558_D101_A4)
2914                 netdev->features |= NETIF_F_VLAN_CHALLENGED;
2915 
2916         /* locks must be initialized before calling hw_reset */
2917         spin_lock_init(&nic->cb_lock);
2918         spin_lock_init(&nic->cmd_lock);
2919         spin_lock_init(&nic->mdio_lock);
2920 
2921         /* Reset the device before pci_set_master() in case device is in some
2922          * funky state and has an interrupt pending - hint: we don't have the
2923          * interrupt handler registered yet. */
2924         e100_hw_reset(nic);
2925 
2926         pci_set_master(pdev);
2927 
2928         setup_timer(&nic->watchdog, e100_watchdog, (unsigned long)nic);
2929 
2930         INIT_WORK(&nic->tx_timeout_task, e100_tx_timeout_task);
2931 
2932         if ((err = e100_alloc(nic))) {
2933                 netif_err(nic, probe, nic->netdev, "Cannot alloc driver memory, aborting\n");
2934                 goto err_out_iounmap;
2935         }
2936 
2937         if ((err = e100_eeprom_load(nic)))
2938                 goto err_out_free;
2939 
2940         e100_phy_init(nic);
2941 
2942         memcpy(netdev->dev_addr, nic->eeprom, ETH_ALEN);
2943         if (!is_valid_ether_addr(netdev->dev_addr)) {
2944                 if (!eeprom_bad_csum_allow) {
2945                         netif_err(nic, probe, nic->netdev, "Invalid MAC address from EEPROM, aborting\n");
2946                         err = -EAGAIN;
2947                         goto err_out_free;
2948                 } else {
2949                         netif_err(nic, probe, nic->netdev, "Invalid MAC address from EEPROM, you MUST configure one.\n");
2950                 }
2951         }
2952 
2953         /* Wol magic packet can be enabled from eeprom */
2954         if ((nic->mac >= mac_82558_D101_A4) &&
2955            (nic->eeprom[eeprom_id] & eeprom_id_wol)) {
2956                 nic->flags |= wol_magic;
2957                 device_set_wakeup_enable(&pdev->dev, true);
2958         }
2959 
2960         /* ack any pending wake events, disable PME */
2961         pci_pme_active(pdev, false);
2962 
2963         strcpy(netdev->name, "eth%d");
2964         if ((err = register_netdev(netdev))) {
2965                 netif_err(nic, probe, nic->netdev, "Cannot register net device, aborting\n");
2966                 goto err_out_free;
2967         }
2968         nic->cbs_pool = pci_pool_create(netdev->name,
2969                            nic->pdev,
2970                            nic->params.cbs.max * sizeof(struct cb),
2971                            sizeof(u32),
2972                            0);
2973         if (!nic->cbs_pool) {
2974                 netif_err(nic, probe, nic->netdev, "Cannot create DMA pool, aborting\n");
2975                 err = -ENOMEM;
2976                 goto err_out_pool;
2977         }
2978         netif_info(nic, probe, nic->netdev,
2979                    "addr 0x%llx, irq %d, MAC addr %pM\n",
2980                    (unsigned long long)pci_resource_start(pdev, use_io ? 1 : 0),
2981                    pdev->irq, netdev->dev_addr);
2982 
2983         return 0;
2984 
2985 err_out_pool:
2986         unregister_netdev(netdev);
2987 err_out_free:
2988         e100_free(nic);
2989 err_out_iounmap:
2990         pci_iounmap(pdev, nic->csr);
2991 err_out_free_res:
2992         pci_release_regions(pdev);
2993 err_out_disable_pdev:
2994         pci_disable_device(pdev);
2995 err_out_free_dev:
2996         free_netdev(netdev);
2997         return err;
2998 }
2999 
3000 static void e100_remove(struct pci_dev *pdev)
3001 {
3002         struct net_device *netdev = pci_get_drvdata(pdev);
3003 
3004         if (netdev) {
3005                 struct nic *nic = netdev_priv(netdev);
3006                 unregister_netdev(netdev);
3007                 e100_free(nic);
3008                 pci_iounmap(pdev, nic->csr);
3009                 pci_pool_destroy(nic->cbs_pool);
3010                 free_netdev(netdev);
3011                 pci_release_regions(pdev);
3012                 pci_disable_device(pdev);
3013         }
3014 }
3015 
3016 #define E100_82552_SMARTSPEED   0x14   /* SmartSpeed Ctrl register */
3017 #define E100_82552_REV_ANEG     0x0200 /* Reverse auto-negotiation */
3018 #define E100_82552_ANEG_NOW     0x0400 /* Auto-negotiate now */
3019 static void __e100_shutdown(struct pci_dev *pdev, bool *enable_wake)
3020 {
3021         struct net_device *netdev = pci_get_drvdata(pdev);
3022         struct nic *nic = netdev_priv(netdev);
3023 
3024         if (netif_running(netdev))
3025                 e100_down(nic);
3026         netif_device_detach(netdev);
3027 
3028         pci_save_state(pdev);
3029 
3030         if ((nic->flags & wol_magic) | e100_asf(nic)) {
3031                 /* enable reverse auto-negotiation */
3032                 if (nic->phy == phy_82552_v) {
3033                         u16 smartspeed = mdio_read(netdev, nic->mii.phy_id,
3034                                                    E100_82552_SMARTSPEED);
3035 
3036                         mdio_write(netdev, nic->mii.phy_id,
3037                                    E100_82552_SMARTSPEED, smartspeed |
3038                                    E100_82552_REV_ANEG | E100_82552_ANEG_NOW);
3039                 }
3040                 *enable_wake = true;
3041         } else {
3042                 *enable_wake = false;
3043         }
3044 
3045         pci_clear_master(pdev);
3046 }
3047 
3048 static int __e100_power_off(struct pci_dev *pdev, bool wake)
3049 {
3050         if (wake)
3051                 return pci_prepare_to_sleep(pdev);
3052 
3053         pci_wake_from_d3(pdev, false);
3054         pci_set_power_state(pdev, PCI_D3hot);
3055 
3056         return 0;
3057 }
3058 
3059 #ifdef CONFIG_PM
3060 static int e100_suspend(struct pci_dev *pdev, pm_message_t state)
3061 {
3062         bool wake;
3063         __e100_shutdown(pdev, &wake);
3064         return __e100_power_off(pdev, wake);
3065 }
3066 
3067 static int e100_resume(struct pci_dev *pdev)
3068 {
3069         struct net_device *netdev = pci_get_drvdata(pdev);
3070         struct nic *nic = netdev_priv(netdev);
3071 
3072         pci_set_power_state(pdev, PCI_D0);
3073         pci_restore_state(pdev);
3074         /* ack any pending wake events, disable PME */
3075         pci_enable_wake(pdev, PCI_D0, 0);
3076 
3077         /* disable reverse auto-negotiation */
3078         if (nic->phy == phy_82552_v) {
3079                 u16 smartspeed = mdio_read(netdev, nic->mii.phy_id,
3080                                            E100_82552_SMARTSPEED);
3081 
3082                 mdio_write(netdev, nic->mii.phy_id,
3083                            E100_82552_SMARTSPEED,
3084                            smartspeed & ~(E100_82552_REV_ANEG));
3085         }
3086 
3087         netif_device_attach(netdev);
3088         if (netif_running(netdev))
3089                 e100_up(nic);
3090 
3091         return 0;
3092 }
3093 #endif /* CONFIG_PM */
3094 
3095 static void e100_shutdown(struct pci_dev *pdev)
3096 {
3097         bool wake;
3098         __e100_shutdown(pdev, &wake);
3099         if (system_state == SYSTEM_POWER_OFF)
3100                 __e100_power_off(pdev, wake);
3101 }
3102 
3103 /* ------------------ PCI Error Recovery infrastructure  -------------- */
3104 /**
3105  * e100_io_error_detected - called when PCI error is detected.
3106  * @pdev: Pointer to PCI device
3107  * @state: The current pci connection state
3108  */
3109 static pci_ers_result_t e100_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
3110 {
3111         struct net_device *netdev = pci_get_drvdata(pdev);
3112         struct nic *nic = netdev_priv(netdev);
3113 
3114         netif_device_detach(netdev);
3115 
3116         if (state == pci_channel_io_perm_failure)
3117                 return PCI_ERS_RESULT_DISCONNECT;
3118 
3119         if (netif_running(netdev))
3120                 e100_down(nic);
3121         pci_disable_device(pdev);
3122 
3123         /* Request a slot reset. */
3124         return PCI_ERS_RESULT_NEED_RESET;
3125 }
3126 
3127 /**
3128  * e100_io_slot_reset - called after the pci bus has been reset.
3129  * @pdev: Pointer to PCI device
3130  *
3131  * Restart the card from scratch.
3132  */
3133 static pci_ers_result_t e100_io_slot_reset(struct pci_dev *pdev)
3134 {
3135         struct net_device *netdev = pci_get_drvdata(pdev);
3136         struct nic *nic = netdev_priv(netdev);
3137 
3138         if (pci_enable_device(pdev)) {
3139                 pr_err("Cannot re-enable PCI device after reset\n");
3140                 return PCI_ERS_RESULT_DISCONNECT;
3141         }
3142         pci_set_master(pdev);
3143 
3144         /* Only one device per card can do a reset */
3145         if (0 != PCI_FUNC(pdev->devfn))
3146                 return PCI_ERS_RESULT_RECOVERED;
3147         e100_hw_reset(nic);
3148         e100_phy_init(nic);
3149 
3150         return PCI_ERS_RESULT_RECOVERED;
3151 }
3152 
3153 /**
3154  * e100_io_resume - resume normal operations
3155  * @pdev: Pointer to PCI device
3156  *
3157  * Resume normal operations after an error recovery
3158  * sequence has been completed.
3159  */
3160 static void e100_io_resume(struct pci_dev *pdev)
3161 {
3162         struct net_device *netdev = pci_get_drvdata(pdev);
3163         struct nic *nic = netdev_priv(netdev);
3164 
3165         /* ack any pending wake events, disable PME */
3166         pci_enable_wake(pdev, PCI_D0, 0);
3167 
3168         netif_device_attach(netdev);
3169         if (netif_running(netdev)) {
3170                 e100_open(netdev);
3171                 mod_timer(&nic->watchdog, jiffies);
3172         }
3173 }
3174 
3175 static const struct pci_error_handlers e100_err_handler = {
3176         .error_detected = e100_io_error_detected,
3177         .slot_reset = e100_io_slot_reset,
3178         .resume = e100_io_resume,
3179 };
3180 
3181 static struct pci_driver e100_driver = {
3182         .name =         DRV_NAME,
3183         .id_table =     e100_id_table,
3184         .probe =        e100_probe,
3185         .remove =       e100_remove,
3186 #ifdef CONFIG_PM
3187         /* Power Management hooks */
3188         .suspend =      e100_suspend,
3189         .resume =       e100_resume,
3190 #endif
